


ARM Macro Assembler    Page 1 


    1 00000000         ;/*
    2 00000000         ;    FreeRTOS V7.2.0 - Copyright (C) 2012 Real Time Engi
                       neers Ltd.
    3 00000000         ; 
    4 00000000         ;
    5 00000000         ;    ***************************************************
                       ************************
    6 00000000         ;     *                                                 
                                             *
    7 00000000         ;     *    FreeRTOS tutorial books are available in pdf 
                       and paperback.        *
    8 00000000         ;     *    Complete, revised, and edited pdf reference m
                       anuals are also       *
    9 00000000         ;     *    available.                                   
                                             *
   10 00000000         ;     *                                                 
                                             *
   11 00000000         ;     *    Purchasing FreeRTOS documentation will not on
                       ly help you, by       *
   12 00000000         ;     *    ensuring you get running as quickly as possib
                       le and with an        *
   13 00000000         ;     *    in-depth knowledge of how to use FreeRTOS, it
                        will also help       *
   14 00000000         ;     *    the FreeRTOS project to continue with its mis
                       sion of providing     *
   15 00000000         ;     *    professional grade, cross platform, de facto 
                       standard solutions    *
   16 00000000         ;     *    for microcontrollers - completely free of cha
                       rge!                  *
   17 00000000         ;     *                                                 
                                             *
   18 00000000         ;     *    >>> See http://www.FreeRTOS.org/Documentation
                        for details. <<<     *
   19 00000000         ;     *                                                 
                                             *
   20 00000000         ;     *    Thank you for using FreeRTOS, and thank you f
                       or your support!      *
   21 00000000         ;     *                                                 
                                             *
   22 00000000         ;    ***************************************************
                       ************************
   23 00000000         ;
   24 00000000         ;
   25 00000000         ;    This file is part of the FreeRTOS distribution.
   26 00000000         ;
   27 00000000         ;    FreeRTOS is free software; you can redistribute it 
                       and/or modify it under
   28 00000000         ;    the terms of the GNU General Public License (versio
                       n 2) as published by the
   29 00000000         ;    Free Software Foundation AND MODIFIED BY the FreeRT
                       OS exception.
   30 00000000         ;    >>>NOTE<<< The modification to the GPL is included 
                       to allow you to
   31 00000000         ;    distribute a combined work that includes FreeRTOS w
                       ithout being obliged to
   32 00000000         ;    provide the source code for proprietary components 
                       outside of the FreeRTOS
   33 00000000         ;    kernel.  FreeRTOS is distributed in the hope that i
                       t will be useful, but



ARM Macro Assembler    Page 2 


   34 00000000         ;    WITHOUT ANY WARRANTY; without even the implied warr
                       anty of MERCHANTABILITY
   35 00000000         ;    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU G
                       eneral Public License for
   36 00000000         ;    more details. You should have received a copy of th
                       e GNU General Public
   37 00000000         ;    License and the FreeRTOS license exception along wi
                       th FreeRTOS; if not it
   38 00000000         ;    can be viewed here: http://www.freertos.org/a00114.
                       html and also obtained
   39 00000000         ;    by writing to Richard Barry, contact details for wh
                       om are available on the
   40 00000000         ;    FreeRTOS WEB site.
   41 00000000         ;
   42 00000000         ;    1 tab == 4 spaces!
   43 00000000         ;
   44 00000000         ;    http://www.FreeRTOS.org - Documentation, latest inf
                       ormation, license and
   45 00000000         ;    contact details.
   46 00000000         ;
   47 00000000         ;    http://www.SafeRTOS.com - A version that is certifi
                       ed for use in safety
   48 00000000         ;    critical systems.
   49 00000000         ;
   50 00000000         ;    http://www.OpenRTOS.com - Commercial support, devel
                       opment, porting,
   51 00000000         ;    licensing and training services.
   52 00000000         ;*/
   53 00000000         
   54 00000000                 INCLUDE          portmacro.inc
    1 00000000         ;/*
    2 00000000         ;    FreeRTOS V9.0.0 - Copyright (C) 2016 Real Time Engi
                       neers Ltd.
    3 00000000         ;    All rights reserved
    4 00000000         ;
    5 00000000         ;
    6 00000000         ;    ***************************************************
                       ************************
    7 00000000         ;     *                                                 
                                             *
    8 00000000         ;     *    FreeRTOS tutorial books are available in pdf 
                       and paperback.        *
    9 00000000         ;     *    Complete, revised, and edited pdf reference m
                       anuals are also       *
   10 00000000         ;     *    available.                                   
                                             *
   11 00000000         ;     *                                                 
                                             *
   12 00000000         ;     *    Purchasing FreeRTOS documentation will not on
                       ly help you, by       *
   13 00000000         ;     *    ensuring you get running as quickly as possib
                       le and with an        *
   14 00000000         ;     *    in-depth knowledge of how to use FreeRTOS, it
                        will also help       *
   15 00000000         ;     *    the FreeRTOS project to continue with its mis
                       sion of providing     *
   16 00000000         ;     *    professional grade, cross platform, de facto 
                       standard solutions    *
   17 00000000         ;     *    for microcontrollers - completely free of cha



ARM Macro Assembler    Page 3 


                       rge!                  *
   18 00000000         ;     *                                                 
                                             *
   19 00000000         ;     *    >>> See http://www.FreeRTOS.org/Documentation
                        for details. <<<     *
   20 00000000         ;     *                                                 
                                             *
   21 00000000         ;     *    Thank you for using FreeRTOS, and thank you f
                       or your support!      *
   22 00000000         ;     *                                                 
                                             *
   23 00000000         ;    ***************************************************
                       ************************
   24 00000000         ;
   25 00000000         ;
   26 00000000         ;    This file is part of the FreeRTOS distribution.
   27 00000000         ;
   28 00000000         ;    FreeRTOS is free software; you can redistribute it 
                       and/or modify it under
   29 00000000         ;    the terms of the GNU General Public License (versio
                       n 2) as published by the
   30 00000000         ;    Free Software Foundation AND MODIFIED BY the FreeRT
                       OS exception.
   31 00000000         ;    >>>NOTE<<< The modification to the GPL is included 
                       to allow you to
   32 00000000         ;    distribute a combined work that includes FreeRTOS w
                       ithout being obliged to
   33 00000000         ;    provide the source code for proprietary components 
                       outside of the FreeRTOS
   34 00000000         ;    kernel.  FreeRTOS is distributed in the hope that i
                       t will be useful, but
   35 00000000         ;    WITHOUT ANY WARRANTY; without even the implied warr
                       anty of MERCHANTABILITY
   36 00000000         ;    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU G
                       eneral Public License for
   37 00000000         ;    more details. You should have received a copy of th
                       e GNU General Public
   38 00000000         ;    License and the FreeRTOS license exception along wi
                       th FreeRTOS; if not it
   39 00000000         ;    can be viewed here: http://www.freertos.org/a00114.
                       html and also obtained
   40 00000000         ;    by writing to Richard Barry, contact details for wh
                       om are available on the
   41 00000000         ;    FreeRTOS WEB site.
   42 00000000         ;
   43 00000000         ;    1 tab == 4 spaces!
   44 00000000         ;
   45 00000000         ;    http://www.FreeRTOS.org - Documentation, latest inf
                       ormation, license and
   46 00000000         ;    contact details.
   47 00000000         ;
   48 00000000         ;    http://www.SafeRTOS.com - A version that is certifi
                       ed for use in safety
   49 00000000         ;    critical systems.
   50 00000000         ;
   51 00000000         ;    http://www.OpenRTOS.com - Commercial support, devel
                       opment, porting,
   52 00000000         ;    licensing and training services.
   53 00000000         ;



ARM Macro Assembler    Page 4 


   54 00000000         ;    Modifications for LPC2468 by Jonathan Dukes (jdukes
                       @scss.tcd.ie)
   55 00000000         ;*/
   56 00000000         
   57 00000000                 IMPORT           ulCriticalNesting ;
   58 00000000                 IMPORT           pxCurrentTCB ;
   59 00000000         
   60 00000000         
   61 00000000                 MACRO
   62 00000000                 portRESTORE_CONTEXT
   63 00000000         
   64 00000000         
   65 00000000                 LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   66 00000000                 LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   67 00000000                 LDR              LR, [R0]
   68 00000000         
   69 00000000                 LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on...
   70 00000000                 LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   71 00000000                 STR              R1, [R0]    ;
   72 00000000         
   73 00000000                 LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   74 00000000                 MSR              SPSR_cxsf, R0 ;
   75 00000000         
   76 00000000                 LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 
                                                            for the task.
   77 00000000                 NOP                          ;
   78 00000000         
   79 00000000                 LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address
   80 00000000         
   81 00000000         ; And return - correcting the offset in the LR to obtain
                        ...
   82 00000000                 SUBS             PC, LR, #4  ; ...the correct ad
                                                            dress.
   83 00000000         
   84 00000000                 MEND
   85 00000000         
   86 00000000         ; /*****************************************************
                       *****************/
   87 00000000         
   88 00000000                 MACRO
   89 00000000                 portSAVE_CONTEXT
   90 00000000         
   91 00000000         
   92 00000000                 STMDB            SP!, {R0}   ; Store R0 first as
                                                             we need to use it.
                                                            
   93 00000000         



ARM Macro Assembler    Page 5 


   94 00000000                 STMDB            SP,{SP}^    ; Set R0 to point t
                                                            o the task stack po
                                                            inter.
   95 00000000                 NOP                          ; See ARMARM manual
                                                             STM(2) notes for e
                                                            xpanation of NOP
   96 00000000                 SUB              SP, SP, #4  ;
   97 00000000                 LDMIA            SP!,{R0}    ;
   98 00000000         
   99 00000000                 STMDB            R0!, {LR}   ; Push the return a
                                                            ddress onto the sta
                                                            ck.
  100 00000000                 MOV              LR, R0      ; Now we have saved
                                                             LR we can use it i
                                                            nstead of R0.
  101 00000000                 LDMIA            SP!, {R0}   ; Pop R0 so we can 
                                                            save it onto the sy
                                                            stem mode stack.
  102 00000000         
  103 00000000                 STMDB            LR,{R0-LR}^ ; Push all the syst
                                                            em mode registers o
                                                            nto the task stack.
                                                            
  104 00000000                 NOP                          ; See ARMARM manual
                                                             STM(2) notes for e
                                                            xpanation of NOP
  105 00000000                 SUB              LR, LR, #60 ;
  106 00000000         
  107 00000000                 MRS              R0, SPSR    ; Push the SPSR ont
                                                            o the task stack.
  108 00000000                 STMDB            LR!, {R0}   ;
  109 00000000         
  110 00000000                 LDR              R0, =ulCriticalNesting ;
  111 00000000                 LDR              R0, [R0]    ;
  112 00000000                 STMDB            LR!, {R0}   ;
  113 00000000         
  114 00000000                 LDR              R0, =pxCurrentTCB ; Store the n
                                                            ew top of stack for
                                                             the task.
  115 00000000                 LDR              R1, [R0]    ;
  116 00000000                 STR              LR, [R1]    ;
  117 00000000         
  118 00000000                 MEND
  119 00000000         
  120 00000000                 END
   55 00000000         
   56 00000000         ;The UART interrupt entry point is defined within an ass
                       embly wrapper
   57 00000000         ;within this file.  This takes care of the task context 
                       saving before it
   58 00000000         ;calls the main handler (vUART_ISRHandler()) which is wr
                       itten in C within
   59 00000000         ;serial.c.  The execution of the handler can unblock tas
                       ks that were blocked
   60 00000000         ;waiting for UART events.  Once the handler completes th
                       e asm wrapper 
   61 00000000         ;finishes off by restoring the context of whichever task
                        is now selected to 
   62 00000000         ;enter the RUNNING state (which might now be a different



ARM Macro Assembler    Page 6 


                        task to that which
   63 00000000         ;was originally interrupted.
   64 00000000                 IMPORT           vUART_ISRHandler
   65 00000000                 EXPORT           vUART_ISREntry
   66 00000000         
   67 00000000         ;/* Interrupt entry must always be in ARM mode. */
   68 00000000                 ARM
   69 00000000                 AREA             |.text|, CODE, READONLY
   70 00000000         
   71 00000000         
   72 00000000         vUART_ISREntry
   73 00000000         
   74 00000000                 PRESERVE8
   75 00000000         
   76 00000000         ; Save the context of the interrupted task.
   77 00000000                 portSAVE_CONTEXT
   90 00000000         
   91 00000000         
   92 00000000 E92D0001        STMDB            SP!, {R0}   ; Store R0 first as
                                                             we need to use it.
                                                            
   93 00000004         
   94 00000004 E94D2000        STMDB            SP,{SP}^    ; Set R0 to point t
                                                            o the task stack po
                                                            inter.
   95 00000008 E1A00000        NOP                          ; See ARMARM manual
                                                             STM(2) notes for e
                                                            xpanation of NOP
   96 0000000C E24DD004        SUB              SP, SP, #4  ;
   97 00000010 E8BD0001        LDMIA            SP!,{R0}    ;
   98 00000014         
   99 00000014 E9204000        STMDB            R0!, {LR}   ; Push the return a
                                                            ddress onto the sta
                                                            ck.
  100 00000018 E1A0E000        MOV              LR, R0      ; Now we have saved
                                                             LR we can use it i
                                                            nstead of R0.
  101 0000001C E8BD0001        LDMIA            SP!, {R0}   ; Pop R0 so we can 
                                                            save it onto the sy
                                                            stem mode stack.
  102 00000020         
  103 00000020 E94E7FFF        STMDB            LR,{R0-LR}^ ; Push all the syst
                                                            em mode registers o
                                                            nto the task stack.
                                                            
  104 00000024 E1A00000        NOP                          ; See ARMARM manual
                                                             STM(2) notes for e
                                                            xpanation of NOP
  105 00000028 E24EE03C        SUB              LR, LR, #60 ;
  106 0000002C         
  107 0000002C E14F0000        MRS              R0, SPSR    ; Push the SPSR ont
                                                            o the task stack.
  108 00000030 E92E0001        STMDB            LR!, {R0}   ;
  109 00000034         
  110 00000034 E59F004C        LDR              R0, =ulCriticalNesting ;
  111 00000038 E5900000        LDR              R0, [R0]    ;
  112 0000003C E92E0001        STMDB            LR!, {R0}   ;
  113 00000040         
  114 00000040 E59F0044        LDR              R0, =pxCurrentTCB ; Store the n



ARM Macro Assembler    Page 7 


                                                            ew top of stack for
                                                             the task.
  115 00000044 E5901000        LDR              R1, [R0]    ;
  116 00000048 E581E000        STR              LR, [R1]    ;
  117 0000004C         
   78 0000004C         
   79 0000004C         ; Call the C handler function - defined within serial.c.
                       
   80 0000004C E59F003C        LDR              R0, =vUART_ISRHandler
   81 00000050 E1A0E00F        MOV              LR, PC
   82 00000054 E12FFF10        BX               R0
   83 00000058         
   84 00000058         ; Finish off by restoring the context of the task that h
                       as been chosen to 
   85 00000058         ; run next - which might be a different task to that whi
                       ch was originally
   86 00000058         ; interrupted.
   87 00000058                 portRESTORE_CONTEXT
   63 00000058         
   64 00000058         
   65 00000058 E59F002C        LDR              R0, =pxCurrentTCB ; Set the LR 
                                                            to the task stack. 
                                                             The location was..
                                                            .
   66 0000005C E5900000        LDR              R0, [R0]    ; ... stored in pxC
                                                            urrentTCB
   67 00000060 E590E000        LDR              LR, [R0]
   68 00000064         
   69 00000064 E59F001C        LDR              R0, =ulCriticalNesting ; The cr
                                                            itical nesting dept
                                                            h is the first item
                                                             on...
   70 00000068 E8BE0002        LDMFD            LR!, {R1}   ; ...the stack.  Lo
                                                            ad it into the ulCr
                                                            iticalNesting var.
   71 0000006C E5801000        STR              R1, [R0]    ;
   72 00000070         
   73 00000070 E8BE0001        LDMFD            LR!, {R0}   ; Get the SPSR from
                                                             the stack.
   74 00000074 E16FF000        MSR              SPSR_cxsf, R0 ;
   75 00000078         
   76 00000078 E8DE7FFF        LDMFD            LR, {R0-R14}^ ; Restore all sys
                                                            tem mode registers 
                                                            for the task.
   77 0000007C E1A00000        NOP                          ;
   78 00000080         
   79 00000080 E59EE03C        LDR              LR, [LR, #+60] ; Restore the re
                                                            turn address
   80 00000084         
   81 00000084         ; And return - correcting the offset in the LR to obtain
                        ...
   82 00000084 E25EF004        SUBS             PC, LR, #4  ; ...the correct ad
                                                            dress.
   83 00000088         
   88 00000088         
   89 00000088                 END
              00000000 
              00000000 
              00000000 



ARM Macro Assembler    Page 8 


Command Line: --debug --xref --diag_suppress=9931 --apcs=interwork --depend=.\s
erialisr.d -o.\serialisr.o -I..\FreeRTOS\Source\portable\TCD\ARM7_LPC2468 -IC:\
Keil_v5\ARM\RV31\INC -IC:\Keil_v5\ARM\CMSIS\Include -IC:\Keil_v5\ARM\Inc\Philip
s --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 522" --list=.
\serialisr.lst serialISR.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 69 in file serialISR.s
   Uses
      None
Comment: .text unused
vUART_ISREntry 00000000

Symbol: vUART_ISREntry
   Definitions
      At line 72 in file serialISR.s
   Uses
      At line 65 in file serialISR.s
Comment: vUART_ISREntry used once
2 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

pxCurrentTCB 00000000

Symbol: pxCurrentTCB
   Definitions
      At line 58 in file ..\FreeRTOS\Source\portable\TCD\ARM7_LPC2468\portmacro
.inc
   Uses
      At line 114 in macro portSAVE_CONTEXT
      at line 77 in file serialISR.s
      At line 65 in macro portRESTORE_CONTEXT
      at line 87 in file serialISR.s

ulCriticalNesting 00000000

Symbol: ulCriticalNesting
   Definitions
      At line 57 in file ..\FreeRTOS\Source\portable\TCD\ARM7_LPC2468\portmacro
.inc
   Uses
      At line 110 in macro portSAVE_CONTEXT
      at line 77 in file serialISR.s
      At line 69 in macro portRESTORE_CONTEXT
      at line 87 in file serialISR.s

vUART_ISRHandler 00000000

Symbol: vUART_ISRHandler
   Definitions
      At line 64 in file serialISR.s
   Uses
      At line 80 in file serialISR.s
Comment: vUART_ISRHandler used once
3 symbols
339 symbols in table
